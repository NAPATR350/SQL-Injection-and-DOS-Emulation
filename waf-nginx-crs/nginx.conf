events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format with POST data info
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '"$request_body"';

    access_log /var/log/nginx/access.log main;

    # Upstream สำหรับ backend server
    upstream backend {
        server web-server:80;
    }

    # WAF Rules for GET requests
    map $request_uri $sql_injection_get {
        default 0;
        "~*('|--|union.*select|select.*from)" 1;
    }

    map $request_uri $xss_attack {
        default 0;
        "~*(<script|javascript:|onload=|onerror=)" 1;
    }

    map $request_uri $path_traversal {
        default 0;
        "~*(\.\./|\.\.\\|etc/passwd)" 1;
    }

    server {
        listen 80;
        server_name _;

        # Read request body for POST inspection (limited size)
        client_max_body_size 1M;
        client_body_buffer_size 128k;

        # Block based on request method and patterns
        location / {
            # For POST requests, we need to inspect the body
            if ($request_method = POST) {
                # This is a simplified approach - in production use ModSecurity
                # We'll rely on the application to handle SQL injection
            }

            # Block GET-based attacks
            if ($sql_injection_get) {
                return 403 "SQL Injection Blocked by WAF (GET)";
            }

            if ($xss_attack) {
                return 403 "XSS Attack Blocked by WAF";
            }

            if ($path_traversal) {
                return 403 "Path Traversal Blocked by WAF";
            }

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Log the request body for debugging
            set $loggable_body $request_body;
            if ($content_type ~* "application/x-www-form-urlencoded") {
                access_log /var/log/nginx/post_requests.log main;
            }
        }

        # Health check
        location /health {
            return 200 "WAF is working - POST inspection limited";
            add_header Content-Type text/plain;
        }
    }
}
